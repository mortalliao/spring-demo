<?xml version="1.0" encoding="utf-8"?>
<beans xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://www.springframework.org/schema/beans"
	xmlns:p="http://www.springframework.org/schema/p" xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
       	 				   http://www.springframework.org/schema/beans/spring-beans-4.2.xsd
       	 				   http://www.springframework.org/schema/aop
       	 				   http://www.springframework.org/schema/aop/spring-aop-4.1.xsd">
       	 				   
	<!-- 启用aspectj的注解方式的代理 -->
    <aop:aspectj-autoproxy />

     <!-- 配置Bean -->
	<bean id="adminService" class="org.spring.learning.aop.service.AdminService" />
	<bean id="userService" class="org.spring.learning.aop.service.UserService" />

    <!-- 配置切面bean -->
	<bean id="logAdvice" class="org.spring.learning.aop.LogAdvice" />

    <!-- 配置AOP切面的信息 -->
	<aop:config>
     	<!-- 配置切入点表达式: 指定切哪些包下的， 哪些类、哪些方法
     		expression: 切入点表达式
     		  a. execution([访问权限] [返回值类型] 包.类.方法(形参) [throws 异常])
     	 -->
		<aop:pointcut expression="execution(* org.spring.learning.aop.service.*.*(..))" id="aa" />

     	<!-- 把切面bean 运用到  哪些切入点 -->
		<!-- <aop:advisor advice-ref="logAdvice" pointcut-ref="aa" /> -->
		
		<!-- 把普通的bean转化成切面bean -->
		<aop:aspect ref="logAdvice">
     		<!-- 在目标方法调用之前  aop:before(目标方法只执行之前)
     			args(a,b):要求目标方法必须有匹配的形参
     		-->
     		<!-- <aop:before method="before" pointcut="execution(* cn.itcast.service.*.*(..)) and args(a,b)"/> -->
     		
     		<!-- 
     			在调用目标方法之后
     			aop:after(无论目标方法是正常结束还是因为异常结束) 
     			bean(bean的id|*bean的id部分名称):要求指定的bean
     		-->
     		<!-- <aop:after method="after" pointcut="bean(*Service)"/> -->
     		
     		<!-- 
     			在调用目标方法有返回值之后
     			aop:after-returning(目标方法正常结束返回值后)
     			this(类型):要求aop代理对象必须是指定类型
     		 -->
     		 <!-- <aop:after-returning method="afterReturning" 
     		 	pointcut="this(cn.itcast.service.AdminService)" returning="obj"/> -->
     		 	
     		 <!-- 
     		 	在调用目标方法出现异常之后
     		 	aop:after-throwing(当目标方法因为异常结束抛出异常)
     		 	target(类型):要求目标对象必须是指定类型
     		  -->
     		 <!--  <aop:after-throwing method="afterThrowing" 
     		  		pointcut="target(cn.itcast.service.AdminService)" throwing="ex"/> -->
     	
     		  <!-- 
     		            在调用目标方法前后都进入
     		  	aop:around(在目标方法的前、后都会织入)
     		   -->
			<aop:around method="around" pointcut-ref="aa" />
		</aop:aspect>

	</aop:config>
</beans>